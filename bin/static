#!/usr/bin/env node

'use strict';

const http = require('http');
const httpStatic = require('..');

const BASEDIR = process.env.DIR || path.resolve(process.argv[2] || '.');
const PORT = process.env.PORT || process.argv[3] || 3000;

const app = http.createServer(httpStatic(BASEDIR));

app.on('error', onError);
app.on('listening', onListening);

module.exports.app = app;

module.exports.listen = _ => {
  app.listen(PORT, '0.0.0.0');
};


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = app.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log(`Server listening on ${bind}`);
}

